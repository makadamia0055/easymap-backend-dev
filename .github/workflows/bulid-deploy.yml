name: Build and Deploy Java Application

on:
  push:
    branches:
      - main  # 또는 원하는 브랜치

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Replace secrets in application.yml
      run: |
        sed -i -e "s#{{ACTIVE_PROFILE}}#${{ secrets.ACTIVE_PROFILE }}#g" ./src/main/resources/application.yml
        sed -i -e "s#{{GOOGLE_CLIENT_ID}}#${{ secrets.GOOGLE_CLIENT_ID }}#g" ./src/main/resources/application-prd.yml
        sed -i -e "s#{{GOOGLE_CLIENT_SECRET}}#${{ secrets.GOOGLE_CLIENT_SECRET }}#g" ./src/main/resources/application-prd.yml
        sed -i -e "s#{{KAKAO_CLIEND_ID}}#${{ secrets.KAKAO_CLIEND_ID }}#g" ./src/main/resources/application-prd.yml
        sed -i -e "s#{{KAKAO_CLIENT_SECRET}}#${{ secrets.KAKAO_CLIENT_SECRET }}#g" ./src/main/resources/application-prd.yml

        sed -i -e "s#{{DATASOURCE_URL}}#${{ secrets.DATASOURCE_URL }}#g" ./src/main/resources/application-prd.yml
        sed -i -e "s#{{DB_USERNAME}}#${{ secrets.DB_USERNAME }}#g" ./src/main/resources/application-prd.yml
        sed -i -e "s#{{DB_PASSWORD}}#${{ secrets.DB_PASSWORD }}#g" ./src/main/resources/application-prd.yml

        sed -i -e "s#{{JWT_SECRET}}#${{ secrets.JWT_SECRET }}#g" ./src/main/resources/application-prd.yml
        sed -i -e "s#{{REDIRECT_URL}}#${{ secrets.REDIRECT_URL }}#g" ./src/main/resources/application-prd.yml
        sed -i -e "s#{{REDIRECT_URL_FAILED}}#${{ secrets.REDIRECT_URL_FAILED }}#g" ./src/main/resources/application-prd.yml

        sed -i -e "s#{{AWS_ACCESS_KEY}}#${{ secrets.AWS_ACCESS_KEY }}#g" ./src/main/resources/application-prd.yml
        sed -i -e "s#{{AWS_SECRET_ACCESS_KEY}}#${{ secrets.AWS_SECRET_ACCESS_KEY }}#g" ./src/main/resources/application-prd.yml
        sed -i -e "s#{{AWS_IMAGE_BUCKET_NAME}}#${{ secrets.AWS_IMAGE_BUCKET_NAME }}#g" ./src/main/resources/application-prd.yml
        sed -i -e "s#{{AWS_USER_RAWDATA_BUCKET_NAME}}#${{ secrets.AWS_USER_RAWDATA_BUCKET_NAME }}#g" ./src/main/resources/application-prd.yml
        
        sed -i -e "s#{{FRONT_SERVER_URL}}#${{ secrets.FRONT_SERVER_URL }}#g" ./src/main/resources/application-prd.yml

        sed -i -e "s#{{VWORLD_CONFORM_KEY}}#${{ secrets.VWORLD_CONFORM_KEY }}#g" ./src/main/resources/application-prd.yml
        sed -i -e "s#{{JUSO_CONFORM_KEY}}#${{ secrets.JUSO_CONFORM_KEY }}#g" ./src/main/resources/application-prd.yml

    - name: Verify application.yml content
      run: cat ./src/main/resources/application-prd.yml

    - name: Log in to Amazon ECR
      id: ecr-login
      uses: aws-actions/amazon-ecr-login@v1
      with:
        registry-type: private
      env:
        AWS_REGION: ${{ secrets.AWS_REGION }}  
        AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
        AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

    - name: Build and push Docker image to ECR
      env:
        ECR_REGISTRY: ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com
        ECR_REPOSITORY: easymap-backend
        IMAGE_TAG: ${{ github.sha }}
      run: |
        docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
        docker tag $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG $ECR_REGISTRY/$ECR_REPOSITORY:latest
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:latest

    - name: Deploy to ECS using CodeDeploy
      env:
        ECR_IMAGE: ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com/easymap-backend:latest
        ECS_CLUSTER_NAME: ${{ secrets.ECS_CLUSTER_NAME }} 
        ECS_SERVICE_NAME: ${{ secrets.ECS_SERVICE_NAME }} 
        CODEDEPLOY_APPLICATION_NAME: ${{ secrets.CODEDEPLOY_APPLICATION_NAME }} 
        CODEDEPLOY_DEPLOYMENT_GROUP_NAME: ${{ secrets.CODEDEPLOY_DEPLOYMENT_GROUP_NAME }} 
      run: |
        # aws ecs update-service \
        #   --cluster $ECS_CLUSTER_NAME \
        #   --service $ECS_SERVICE_NAME \
        #   --force-new-deployment \
        #   --task-definition $ECR_IMAGE

        # appspec.yaml 파일을 읽어서 변수에 저장
        APPSPEC_CONTENT=$(cat appspec.yaml | jq -Rs .)

        # CodeDeploy를 사용하여 배포
        aws deploy create-deployment \
          --application-name $CODEDEPLOY_APPLICATION_NAME \
          --deployment-group-name $CODEDEPLOY_DEPLOYMENT_GROUP_NAME \
          --revision "revisionType=AppSpecContent,appSpecContent={\"content\": \"$APPSPEC_CONTENT\"}"
